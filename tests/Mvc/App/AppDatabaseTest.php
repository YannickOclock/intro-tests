<?php

namespace Tests\Mvc\App;

use Mvc\Utils\Database;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Dotenv\Dotenv;

class AppDatabaseTest extends TestCase
{
    private array $env_vars = [];
    public function setUp(): void
    {
        parent::setUp();
        $dotenv = new DotEnv();
        if(file_exists(__DIR__ . '/../../../.env')) {
            $dotenv->load(__DIR__ . '/../../../.env');
        }

        $this->env_vars = [
            'APP_ENV' => $_ENV['APP_ENV'],

            'DB_HOST' => $_ENV['DB_HOST'],
            'DB_PORT' => $_ENV['DB_PORT'],
            'DB_NAME' => $_ENV['DB_NAME'],
            'DB_USERNAME' => $_ENV['DB_USERNAME'],
            'DB_PASSWORD' => $_ENV['DB_PASSWORD'],

            'DB_TEST_HOST' => $_ENV['DB_TEST_HOST'],
            'DB_TEST_NAME' => $_ENV['DB_TEST_NAME'],
            'DB_TEST_USERNAME' => $_ENV['DB_TEST_USERNAME'],
            'DB_TEST_PASSWORD' => $_ENV['DB_TEST_PASSWORD'],
        ];
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        foreach ($this->env_vars as $key => $value) {
            $_ENV[$key] = $value;
        }
    }

    public function testNotConnectToEnvDatabase() {
        $_ENV['APP_ENV'] = 'dev';
        $_ENV['DB_HOST'] = 'fake';
        $_ENV['DB_NAME'] = 'fake';
        $_ENV['DB_USERNAME'] = 'fake';
        $_ENV['DB_PASSWORD'] = 'fake';

        $this->expectException(\Exception::class);
        Database::destruct();
        Database::getPdo();
        Database::destruct();
    }

    public function testConnectToTestDatabase() {
        $_ENV['APP_ENV'] = 'testing';

        Database::destruct();
        $database = Database::getPdo();
        $this->assertIsObject($database);
        Database::destruct();
    }
}